generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int             @id @default(autoincrement())
  userName            String?         @db.VarChar(100)
  userTag             String          @unique @db.VarChar(25)
  email               String          @unique
  password            String
  avatar              String?         @default("default.jpg")
  biography           String?         @db.VarChar(500)
  createdAt           DateTime        @default(now())
  deletedAt           DateTime?
  updatedAt           DateTime        @updatedAt
  tokenVersion        Int             @default(0)
  bookmarks           Bookmarks[]
  following           Follows[]       @relation("Followed")
  followers           Follows[]       @relation("Follower")
  groups              Groups[]
  joinRequests        JoinRequests[]
  likedPosts          Likes[]
  followedLists       ListFollowers[]
  lists               Lists[]
  posts               Post[]
  createdUserInGroups UsersInGroups[] @relation("Creator")
  usersInGroups       UsersInGroups[]
  usersInLists        UsersInLists[]
}

model Post {
  id             Int         @id @default(autoincrement())
  content        String      @db.VarChar(280)
  likesCount     Int         @default(0)
  authorId       Int
  parentPostId   Int?
  originalPostId Int?
  groupId        Int?
  isRetweet      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  deletedAt      DateTime?
  updatedAt      DateTime    @updatedAt
  bookmarks      Bookmarks[]
  likes          Likes[]
  author         User        @relation(fields: [authorId], references: [id])
  originalPost   Post?       @relation("Retweets", fields: [originalPostId], references: [id])
  retweets       Post[]      @relation("Retweets")
  parentPost     Post?       @relation("Replies", fields: [parentPostId], references: [id])
  replies        Post[]      @relation("Replies")
  group          Groups?     @relation(fields: [groupId], references: [id])
}

model Likes {
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

model Follows {
  followerId Int
  followedId Int
  createdAt  DateTime @default(now())
  followed   User     @relation("Followed", fields: [followedId], references: [id])
  follower   User     @relation("Follower", fields: [followerId], references: [id])

  @@id([followerId, followedId])
}

model Bookmarks {
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

model Lists {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  description   String?         @db.VarChar(500)
  isPrivate     Boolean         @default(false)
  creatorId     Int
  createdAt     DateTime        @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime        @updatedAt
  listFollowers ListFollowers[]
  creator       User            @relation(fields: [creatorId], references: [id])
  usersInLists  UsersInLists[]
}

model ListFollowers {
  listId     Int
  followerId Int
  createdAt  DateTime @default(now())
  follower   User     @relation(fields: [followerId], references: [id])
  list       Lists    @relation(fields: [listId], references: [id])

  @@id([listId, followerId])
}

model UsersInLists {
  userId    Int
  listId    Int
  createdAt DateTime @default(now())
  list      Lists    @relation(fields: [listId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, listId])
}

model Groups {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  description   String?         @db.VarChar(500)
  isPrivate     Boolean         @default(false)
  creatorId     Int
  createdAt     DateTime        @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime        @updatedAt
  creator       User            @relation(fields: [creatorId], references: [id])
  joinRequests  JoinRequests[]
  usersInGroups UsersInGroups[]
  posts         Post[]
}

model UsersInGroups {
  userId      Int
  groupId     Int
  createdAt   DateTime @default(now())
  createdById Int
  createdBy   User     @relation("Creator", fields: [createdById], references: [id])
  group       Groups   @relation(fields: [groupId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@id([userId, groupId])
}

model JoinRequests {
  userId    Int
  groupId   Int
  createdAt DateTime @default(now())
  group     Groups   @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, groupId])
}
